#!/usr/bin/env python3
#import os
#os.environ['OPENBLAS_NUM_THREADS'] = '1'

import pandas as pd
import numpy as np
import plotly.express as px
from IPython.display import HTML
import sys
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import re

import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

from modules_plotly import *
from modules_html import *

input_folder = sys.argv[1]
Output = sys.argv[2]

norm = sys.argv[3]
filt = sys.argv[4]

Oncoprint_All = input_folder+'/CSV/Oncoprint.csv'
Oncoprint_All_wf = input_folder+'/CSV/Oncoprint_wf.csv'
Oncoprint_mean = input_folder+'/CSV/OncoprintPromedio.csv'
Count = input_folder+'/CSV/Count.csv'
NotLoc = input_folder+'/CSV/NotLoc.csv'
OncoprintNorm = input_folder+'/CSV/OncoprintNorm.csv'
OncoprintMeanNorm = input_folder+'/CSV/OncoprintMeanNorm.csv'
PCA_data = input_folder+'/CSV/PCA_vectors.csv'
CountUF=input_folder+'/CSV/CountUF.csv'
bed = input_folder+ '/CSV/StatusCpG.csv'
depth = input_folder + '/CSV/CountUF_depth_merge.csv'
depth2 = input_folder + '/CSV/CountUF_depth.csv'
fastqc = input_folder + '/CSV/fastqc_merge.csv'
boxplot_csv = input_folder + '/CSV/Boxplot_all_sites.csv'

print('#-------------------Plotting-------------------------')
print('normals_status = ' + norm)
print('filter_status = ' + filt)

#=======================fastqc======================#
df = pd.read_csv(fastqc)
fig_fastqc = plot_fastqc(df)

#=======================Depth======================#
if norm == 'True':
    df = pd.read_csv(depth)
    fig_depth = plot_depth(df)
else:
    df = pd.read_csv(depth2)
    fig_depth = plot_depth(df)

#========================All=========================#
if filt == 'True':
    sites_bed = pd.read_csv(bed)
    df = pd.read_csv(Oncoprint_All)
    df = df.drop(['Unnamed: 2'], axis=1)
    df = df.drop(df.index[[0,1]])
    df = df.rename(columns = {'Unnamed: 1':'Start', 'Sample':'Chr'})

    fig_all = plot_all(sites_bed, df)
else:
    sites_bed = pd.read_csv(bed)
    df = pd.read_csv(Oncoprint_All_wf)
    df.columns = list(df.loc[0, :])
    df = df.drop(df.index[[0, 1, 2]])
    df = df.rename(columns = {'Sample':'Chr', np.nan:'Start'})
    fig_all = plot_all(sites_bed, df)

#========================Mean=======================#
if filt == 'True':
    df = pd.read_csv(Oncoprint_mean)
    fig_mean = plot_mean(df)

#=======================Count=======================#
if filt == 'True':
    df = pd.read_csv(Count)
    df2 = pd.read_csv(CountUF)
    fig_samples = plot_count (df, df2)

#=====================Off-target====================#
if filt == 'True':
    df = pd.read_csv(Count)
    df2 = pd.read_csv(NotLoc)
    fig_oft = plot_offtarget(df, df2)

#====================Norm all=======================#
if norm == 'True':
    df = pd.read_csv(OncoprintNorm)
    fig_norm = plot_norm(df)

#====================Norm mean=====================#
if norm == 'True' and filt == 'True':
    df = pd.read_csv(OncoprintMeanNorm)
    fig_mean_norm = plot_mean_norm(df)

#===================Mannhatan======================#
if norm == 'True':
    df = pd.read_csv(OncoprintNorm)
    fig_manhattan = plot_manhattan(df)

#=====================PCA=========================#
if norm == 'True':
    finalDf = pd.read_csv(PCA_data)
    fig_pca = plot_pca(finalDf)

#====================SitePercent===================#
df = pd.read_csv(Oncoprint_All)
fig_percent_site = plot_site_percent(df)

#====================Boxplot=======================#
if norm == 'True':
    df = pd.read_csv(boxplot_csv)
    fig_boxplot = boxplot_site(df)
#======================NormSite=====================#
if norm == 'True':
    df = pd.read_csv(boxplot_csv)
    fig_site_norm = plot_site_norm(df)

#==========================HTML============================#

with open(Output + '/AutoMethyc_Report.html', 'w') as f:
    f.write(html_css())
    if norm == 'True' and filt == 'True':
        f.write(html_navbar_complete())
    elif norm == 'True' and filt == 'False':
        f.write(html_navbar_sFilt())
    elif norm == 'False' and filt == 'True':
        f.write(html_navbar_sNorm())
    elif norm == 'False' and filt == 'False':
        f.write(html_navbar_sNorm_sFilt())

    f.write(html_AutoMethyc())
    f.write(html_base())
    f.write(fig_fastqc.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_depth())
    f.write(fig_depth.to_html(full_html=False, include_plotlyjs='cdn'))
    if filt == 'True':
        f.write(html_coverage())
        f.write(fig_samples.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(fig_oft.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_all())
    f.write(fig_all.to_html(full_html=False, include_plotlyjs='cdn'))
    if filt == 'True':
        f.write(html_mean())
        f.write(fig_mean.to_html(full_html=False, include_plotlyjs='cdn'))
    if norm == 'True':
        f.write(html_norm())
        f.write(fig_norm.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(html_mean_norm())
    if norm == 'True' and filt == 'True':
        f.write(fig_mean_norm.to_html(full_html=False, include_plotlyjs='cdn'))
    if norm == 'True':
        f.write(html_pca())
        f.write(fig_manhattan.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(fig_pca.to_html(full_html=False, include_plotlyjs='cdn'))

        f.write(fig_percent_site.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(fig_boxplot.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(fig_site_norm.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_fooder())
