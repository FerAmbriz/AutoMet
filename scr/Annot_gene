#!/usr/bin/env python3
#import os
#os.environ['OPENBLAS_NUM_THREADS'] = '1'

import sys
import requests
import io
import csv
import pandas as pd
from tqdm import tqdm

bed_file = sys.argv[1]
ref = sys.argv[2]
output = sys.argv[3]

# booleans
filtro = sys.argv[4]

url = 'https://genome.ucsc.edu/cgi-bin/hgTables?hgsid=1442153227_FWCo6wJtrFjEzVt07A5mEs5LeL3m'
session = requests.Session()
params = {
        'hgsid': '1442153227_FWCo6wJtrFjEzVt07A5mEs5LeL3m',
        'db': ref,
        'hgta_group': 'genes',
        'hgta_track': 'refSeqComposite',
        'hgta_table': 'ncbiRefSeq',
        'hgta_regionType': 'genome',
        'hgta_outputType': 'primaryTable',
        'boolshad.sendToGalaxy': '0',
        'boolshad.sendToGreat': '0',
        'boolshad.sendToGenomeSpace': '0',
        'hgta_outFileName': '',
        'hgta_compressType': 'none',
        'hgta_doTopSubmit': 'get output'
    }

response = session.post(url, data=params)
df = pd.read_csv(io.StringIO(response.text), sep='\t')

df = df.drop_duplicates(subset=["name2"])
print('Done extract data from UCSC')


bed = pd.read_csv(bed_file)
if 'Chr' not in list(bed.columns):
    bed.rename(columns = {'Unnamed: 0':'Chr'}, inplace = True)

if filtro == 'True':
    # if 'gene' not in list(bed.columns)
    if 'Gene' not in list(bed.columns):

        gene_lst = []
        site_lst = []
        chrom_lst = []
        strand_lst = []
        name_access_lst = []
        pbar = tqdm(desc='Gene Search', total=len(bed))

        for site, chrom in zip(bed.Start, bed.Chr):
            df_i = df[df['chrom']==chrom]
            indicador  = 'off-target'
            for i,j,gene,st,acc in zip(df_i.txStart, df_i.txEnd, df_i['name2'], df_i.strand, df_i.name):
                if site in list(range(i,j)):
                    gene_lst.append(gene)
                    site_lst.append(site)
                    chrom_lst.append(chrom)
                    strand_lst.append(st)
                    name_access_lst.append(acc)
                    indicador = 'on-target'
            if indicador == 'off-target':
                gene_lst.append('NaN')
                site_lst.append(site)
                chrom_lst.append(chrom)
                strand_lst.append('NaN')
                name_access_lst.append('NaN')

            pbar.update()
        pbar.close()
        df_annotate = pd.DataFrame({ 'Chr': chrom_lst, 'Start': site_lst,
                                    'End': site_lst, 'Gene': gene_lst,
                                    'Strand': strand_lst, 'AccessName': name_access_lst})
        df_annotate = df_annotate.set_index('Chr')
        df_annotate.to_csv(output + '/anotate_bed.csv')
    else:
        # Tiene bed con genes, por lo que no tiene que hacer nada
        print('Is not necessary the gene mapping')

        bed = bed.set_index('Chr')
        bed.to_csv(output + '/anotate_bed.csv')
else:
    # No tiene Genes porque tampoco hay filtro
    # Procesado del oncoprint
    bed.rename(columns={'Sample':'Chr', 'Unnamed: 1':'Start'}, inplace=True)
    #bed['End'] = bed.Start
    bed = bed.drop([0,1,2])

    gene_lst = []
    site_lst = []
    chrom_lst = []
    strand_lst = []
    name_access_lst = []
    pbar = tqdm(desc='Gene Search', total=len(bed))
    print(bed)
    for site, chrom in zip(bed.Start, bed.Chr):
        df_i = df[df['chrom']==chrom]
        indicador  = 'off-target'
        for i,j,gene,st,acc in zip(df_i.txStart, df_i.txEnd, df_i['name2'], df_i.strand, df_i.name):
            if site in list(range(i,j)):
                gene_lst.append(gene)
                site_lst.append(site)
                chrom_lst.append(chrom)
                strand_lst.append(st)
                name_access_lst.append(acc)
                ndicador = 'on-target'
        if indicador == 'off-target':
            gene_lst.append('NaN')
            site_lst.append(site)
            chrom_lst.append(chrom)
            strand_lst.append('NaN')
            name_access_lst.append('NaN')

        pbar.update()
    pbar.close()
    df_annotate = pd.DataFrame({ 'Chr': chrom_lst, 'Start': site_lst,
                                 'End': site_lst, 'Gene': gene_lst,
                                 'Strand': strand_lst, 'AccessName': name_access_lst})
    df_annotate = df_annotate.set_index('Chr')

    df_annotate.to_csv(output + '/anotate_bed.csv')
