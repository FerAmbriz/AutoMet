#!/usr/bin/env python3
#import os
#os.environ['OPENBLAS_NUM_THREADS'] = '1'

import pandas as pd
import numpy as np
import plotly.express as px
from IPython.display import HTML
import sys
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import re

import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

from modules_plotly import *
from modules_html import *

input_folder = sys.argv[1]
Output = sys.argv[2]

norm = sys.argv[3]
depth = sys.argv[4]

print ('======================= making HTML report ======================')

c = input_folder + '/command_options.txt'
depth = input_folder + '/CSV/count_depth_' + str(depth) + '_pass.csv'
Count = input_folder+'/CSV/count_targets.csv'
NotLoc = input_folder+'/CSV/off_targets.csv'
Oncoprint_All = input_folder+'/CSV/matrix_filtered_target.csv'
Oncoprint_mean = input_folder+'/CSV/matrix_mean_gene.csv'
cgi = input_folder+ '/CSV/cgi_features.csv'
fastqc = input_folder + '/CSV/fastqc_raw_data.csv'
OncoprintNorm = input_folder+'/CSV/matrix_filtered_target_normalized.csv'
OncoprintMeanNorm = input_folder + '/CSV/matrix_mean_gene_normalized.csv'
PCA_data = input_folder + '/CSV/pca_vectors.csv'
boxplot_csv = input_folder + '/CSV/filtered_target_normalized.csv'
filtered_target = input_folder + '/CSV/filtered_target.csv'
bed_genes = input_folder + '/CSV/annotated_regions.csv'
mean_gene_normalized = input_folder + '/CSV/mean_gene_normalized.csv'
snv_count = input_folder + '/CSV/snv_count.csv'
volcano = input_folder  + '/CSV/volcano_plot_data.csv'
roc_data = input_folder  + '/CSV/roc_combined.csv'
roc_metrics = input_folder + '/CSV/roc_metrics.csv'
quality_metrics = input_folder + '/CSV/quality_alignment_metrics.csv'
quality_trimming = input_folder + '/CSV/quality_trimming_metrics.csv'
non_conversion = input_folder + '/CSV/non_conversion_metrics.csv'
tSNE_data = input_folder + '/CSV/tsne_vectors.csv'
output_graphs = input_folder + '/CSV/tresholds_graphs.csv'

#=======================fastqc======================#
df = pd.read_csv(fastqc)
print(f'FastQC: \n {df}')
fig_fastqc = plot_fastqc(df)

#=======================trimming======================#
df = pd.read_csv(quality_trimming)
print(f'Trimming: \n {df}')

fig_trimming = plot_trimming(df)

#========================Depth========================#
df = pd.read_csv(depth)
print(f'Depth: \n {df}')

fig_depth = plot_depth(df, norm)

#=======================Alignment======================#
df = pd.read_csv(quality_metrics)
df['Mapping efficiency'] = df['Mapping efficiency'].str.replace('%', '').astype(float)
print(f'Alignment: \n {df}')
fig_alignment = plot_alignment(df)

#=======================non_conversion================#
df = pd.read_csv(non_conversion)
print(f'Non-conversion: \n {df}')

fig_non_conversion = plot_non_conversion(df)

#========================All=========================#
sites_bed = pd.read_csv(cgi)
df = pd.read_csv(Oncoprint_All)
df = df.drop(['Unnamed: 2'], axis=1)
group = pd.DataFrame(df.iloc[0]).drop(['ID', 'Unnamed: 1'])
group[0] = group[0].replace({'controls':0, 'cases':1})
df = df.drop(df.index[[0,1]])
df = df.rename(columns = {'Unnamed: 1':'Start', 'ID':'Chr'})
print(f'Matrix global: \n {df}')


fig_all = plot_all(sites_bed, df, group)

#========================Mean=======================#
df = pd.read_csv(Oncoprint_mean)
print(f'Matrix mean: \n {df}')
fig_mean = plot_mean(df)

#=====================Off-target====================#
on_targets = pd.read_csv(Count)
off_targets = pd.read_csv(NotLoc)

print(f'Off_targets: \n {off_targets}')
print(f'On_targets: \n {on_targets}')

fig_oft = plot_offtarget(on_targets, off_targets, norm)

#====================Norm all=======================#
if norm == 'True':
    df = pd.read_csv(OncoprintNorm)
    print(f'Matrix normalized: \n {df}')
    fig_norm = plot_norm(df)

#====================Norm mean=====================#
if norm == 'True':
    df = pd.read_csv(OncoprintMeanNorm)
    print(f'Matrix mean normalized: \n {df}')
    fig_mean_norm = plot_mean_norm(df)

#==================== Graph corr =====================#
matrix_mean = pd.read_csv(Oncoprint_mean)
print(f'Graph correalation gene: \n {matrix_mean}')

matrix_filtered = pd.read_csv(Oncoprint_All)
print(f'Graph correalation sample: \n {matrix_filtered}')

fig_graph_correlation = plot_graph_conection(matrix_mean, matrix_filtered, output_graphs)

#===================Mannhatan======================#
if norm == 'True':
    df = pd.read_csv(OncoprintNorm)
    print(f'Manhattan plot: \n {df}')
    fig_manhattan = plot_manhattan(df)

#=====================PCA=========================#
if norm == 'True':
    finalDf = pd.read_csv(PCA_data)
    print(f'PCA: \n {PCA_data}')
    fig_pca = plot_pca(finalDf)

#=====================tSNE=========================#
if norm == 'True':
    df = pd.read_csv(tSNE_data)
    print(f't-SNE: \n {df}')
    fig_tsne = plot_tsne(df)

#=====================ROC=========================#
if norm == 'True':
    roc_df = pd.read_csv(roc_data)
    print(f'ROC: \n {roc_df}')
    fig_roc = plot_roc(roc_df)

    roc_metrics = pd.read_csv(roc_metrics)
    roc_metrics.rename(columns={'Unnamed: 0': 'model'}, inplace = True)
    print(f'ROC table: \n {roc_metrics}')
    table_roc = table_roc(roc_metrics)

#====================SitePercent===================#
df = pd.read_csv(Oncoprint_All)
print(f'Site_percent: \n {df}')

fig_percent_site = plot_site_percent(df)

#====================Boxplot=======================#
if norm == 'True':
    df = pd.read_csv(filtered_target)
    print(f'Boxplot: \n {df}')
    fig_boxplot = boxplot_site(df)
#======================NormSite=====================#
if norm == 'True':
    df = pd.read_csv(boxplot_csv)
    print(f'Normalized site: \n {df}')
    fig_site_norm = plot_site_norm(df)

#======================Command======================#
with open(c) as f:
    command = f.readline()

df = pd.read_csv(c)
df = df.reset_index()
df.columns = [ 'Parameter', 'Value']
print(f'Parameters: \n {df}')
fig_table = plot_options(df)

#==========================table_site======================#
df = pd.read_csv(filtered_target)
print(f'Site table: \n {df}')
table_global = plot_site_table(df, 'percentage', 'None')
#==========================table_norm======================#

if norm == 'True':
    df = pd.read_csv(boxplot_csv)
    bed = pd.read_csv(filtered_target)
    print(f'Normalized table: \n {df}')
    table_zscore = plot_site_table(df, 'zscore', bed)
#======================mean_gene_table=====================#
df = pd.read_csv(filtered_target)
print(f'Mean gene table: \n {df}')
table_mean_gene = plot_table_mean_gene(df, 'methpercent')
#===================mean_gene_table_norm===================#
if norm == 'True':
    df = pd.read_csv(mean_gene_normalized)
    print(f'Mean gene table normalized: \n {df}')
    table_mean_gene_normalized = plot_table_mean_gene(df, 'zscore')
#========================TablePCA==========================#
if norm == 'True':
    df = pd.read_csv(PCA_data)
    bed = pd.read_csv(filtered_target)
    print(f'PCA table: \n {df}')
    table_pca = plot_table_pca(df, bed)
#========================TabletSNE==========================#
if norm == 'True':
    df = pd.read_csv(tSNE_data)
    bed = pd.read_csv(filtered_target)
    print(f't-SNE table: \n {df}')
    table_tsne = plot_table_tsne(df, bed)

#=========================DonutCGI=========================#
df = pd.read_csv(cgi)
print(f'Donut CGI: \n {df}')
figure_donut_cgi = plot_donut_cgi(df)
#=======================VolcanoPlot========================#
if norm == 'True':
    df = pd.read_csv(volcano)
    print(f'Volcano: \n {df}')
    fig_volcano = plot_volcano(df)
#===========================SNV============================#
df = pd.read_csv(snv_count)
print(f'SNV count: \n {df}')
fig_count_snv = plot_count_snv(df)
#==========================HTML============================#

with open(Output + '/AutoMethyc_Report.html', 'w') as f:
    f.write(html_css())
    if norm == 'True':
        f.write(html_navbar_complete())
    else:
        f.write(html_navbar_sNorm())

    f.write(html_AutoMethyc(command))
    f.write(fig_table.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_base())
    f.write(fig_fastqc.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(fig_trimming.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_non_conversion())
    f.write(fig_non_conversion.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_alignment())
    f.write(fig_alignment.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_depth())
    f.write(fig_depth.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_coverage())
    f.write(fig_oft.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_cgi())
    f.write(figure_donut_cgi.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_all())
    f.write(table_global.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(fig_all.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_mean_site())
    f.write(fig_percent_site.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_mean_gene())
    f.write(table_mean_gene.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(fig_mean.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_graph())
    f.write(fig_graph_correlation.to_html(full_html=False, include_plotlyjs='cdn'))
    if norm == 'True':
        f.write(html_boxplot())
        f.write(fig_boxplot.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(html_norm())
        f.write(table_zscore.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(fig_norm.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(html_norm_manhattan())
        f.write(fig_manhattan.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(html_mean_site_norm())
        f.write(fig_site_norm.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(html_mean_gene_norm())
        f.write(table_mean_gene_normalized.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(fig_mean_norm.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(html_volcano())
        f.write(fig_volcano.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(html_pca())
        f.write(table_pca.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(fig_pca.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(html_tsne())
        f.write(table_tsne.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(fig_tsne.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(html_roc())
        f.write(table_roc.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(fig_roc.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_snv())
    f.write(fig_count_snv.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_fooder())
print ('======================== done html_report =======================')
