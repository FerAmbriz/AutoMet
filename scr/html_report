#!/usr/bin/env python3
#import os
#os.environ['OPENBLAS_NUM_THREADS'] = '1'

import pandas as pd
import numpy as np
import plotly.express as px
from IPython.display import HTML
import sys
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import re

import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

from modules_plotly import *
from modules_html import *

input_folder = sys.argv[1]
Output = sys.argv[2]

norm = sys.argv[3]
depth = sys.argv[4]

print ('===================== making HTML report =====================')

c = input_folder + '/command_options.txt'
depth = input_folder + '/CSV/count_depth_' + str(depth) + '_pass.csv'
Count = input_folder+'/CSV/count_targets.csv'
NotLoc = input_folder+'/CSV/off_targets.csv'
Oncoprint_All = input_folder+'/CSV/matrix_filtered_target.csv'
Oncoprint_mean = input_folder+'/CSV/matrix_mean_gene.csv'
bed = input_folder+ '/CSV/cgi_features.csv'
fastqc = input_folder + '/CSV/fastqc_raw_data.csv'
OncoprintNorm = input_folder+'/CSV/matrix_filtered_target_normalized.csv'
OncoprintMeanNorm = input_folder+'/CSV/matrix_mean_gene_normalized.csv'
PCA_data = input_folder+'/CSV/pca_vectors.csv'
boxplot_csv = input_folder + '/CSV/filtered_target_normalized.csv'

#=======================fastqc======================#
df = pd.read_csv(fastqc)
fig_fastqc = plot_fastqc(df)

#=======================Depth======================#
df = pd.read_csv(depth)
fig_depth = plot_depth(df)

#========================All=========================#
sites_bed = pd.read_csv(bed)
df = pd.read_csv(Oncoprint_All)
df = df.drop(['Unnamed: 2'], axis=1)
df = df.drop(df.index[[0,1]])
df = df.rename(columns = {'Unnamed: 1':'Start', 'Sample':'Chr'})

fig_all = plot_all(sites_bed, df)

#========================Mean=======================#
df = pd.read_csv(Oncoprint_mean)
fig_mean = plot_mean(df)

#=====================Off-target====================#
df = pd.read_csv(Count)
fig_oft = plot_offtarget(df)

#====================Norm all=======================#
if norm == 'True':
    df = pd.read_csv(OncoprintNorm)
    fig_norm = plot_norm(df)

#====================Norm mean=====================#
if norm == 'True':
    df = pd.read_csv(OncoprintMeanNorm)
    fig_mean_norm = plot_mean_norm(df)

#===================Mannhatan======================#
if norm == 'True':
    df = pd.read_csv(OncoprintNorm)
    fig_manhattan = plot_manhattan(df)

#=====================PCA=========================#
if norm == 'True':
    finalDf = pd.read_csv(PCA_data)
    fig_pca = plot_pca(finalDf)

#====================SitePercent===================#
df = pd.read_csv(Oncoprint_All)
fig_percent_site = plot_site_percent(df)

#====================Boxplot=======================#
if norm == 'True':
    df = pd.read_csv(boxplot_csv)
    fig_boxplot = boxplot_site(df)
#======================NormSite=====================#
if norm == 'True':
    df = pd.read_csv(boxplot_csv)
    fig_site_norm = plot_site_norm(df)

#======================Command======================#
with open(c) as f:
    command = f.readline()

df = pd.read_csv(c)
df = df.reset_index()
df.columns = [ 'Parameter', 'Value']

fig_table = plot_options(df)

#==========================HTML============================#

with open(Output + '/AutoMethyc_Report.html', 'w') as f:
    f.write(html_css())
    if norm == 'True':
        f.write(html_navbar_complete())
    else:
        f.write(html_navbar_sNorm())

    f.write(html_AutoMethyc(command))
    f.write(fig_table.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_base())
    f.write(fig_fastqc.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_depth())
    f.write(fig_depth.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_coverage())
    f.write(fig_oft.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_all())
    f.write(fig_all.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_mean_site())
    f.write(fig_percent_site.to_html(full_html=False, include_plotlyjs='cdn'))
    f.write(html_mean_gene())
    f.write(fig_mean.to_html(full_html=False, include_plotlyjs='cdn'))
    if norm == 'True':
        f.write(html_norm())
        f.write(fig_norm.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(fig_site_norm.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(fig_boxplot.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(fig_manhattan.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(html_mean_norm())
        f.write(fig_mean_norm.to_html(full_html=False, include_plotlyjs='cdn'))
        f.write(html_pca())
        f.write(fig_pca.to_html(full_html=False, include_plotlyjs='cdn'))

    f.write(html_fooder())
print ('===================== done html_report =====================')
