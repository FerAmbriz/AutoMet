#!/usr/bin/env python3
# coding: utf-8
#import os
#os.environ['OPENBLAS_NUM_THREADS'] = '1'

import pandas as pd
import numpy as np
import sys

print ('=================== normalizing matrix ===================')

all_sites = pd.read_csv(sys.argv[1], header = None)
onco_mean = pd.read_csv(sys.argv[2])
output = sys.argv[3]

all_sites = all_sites.drop([2], axis = 1)
all_sites.columns = list(all_sites.loc[0, :])
all_sites = all_sites.drop(all_sites.index[[0]])
all_sites = all_sites.rename(columns = {'ID':'Chr', np.nan:'Start'})

onco_mean = onco_mean.rename(columns = {'Gene':'ID'})


lst = ['Status', 'Chr']

for i in range(3,len(all_sites) + 1):
    lst.append(all_sites['Chr'][i] + ':' + all_sites['Start'][i])
all_sites['Site'] = lst
all_sites = all_sites.set_index('Site')

df_controles = all_sites.T
df_controles = df_controles[df_controles['Status'] == 'Normal']
df_controles = df_controles.drop(['Status', 'Chr'], axis=1)

#Cambiar a valores numericos con lo que se va a hacer la media y std
columns = df_controles.columns.values
df_controles[columns] = df_controles[columns].apply(pd.to_numeric, errors='coerce', axis=1)

all_sites = all_sites.T
# Delete rows
all_sites = all_sites.drop(all_sites.index[[0,1]])
typ = list(all_sites['Status'])

    # Delete columns
all_sites = all_sites.drop(['Status','Chr'], axis=1)
columns = all_sites.columns.values
all_sites[columns] = all_sites[columns].apply(pd.to_numeric, errors='coerce', axis=1)
ID = all_sites.index.values

def eval_columns (df, df_cont):
    unique_columns = list(set(list(df.columns) + list(df_cont.columns)))

    df_new = pd.DataFrame()
    df_cont_new = pd.DataFrame()

    for i in unique_columns:
        if i in list(df.columns):
            df_i = pd.DataFrame(df[i])
            df_new = pd.concat([df_new, df_i], axis=1)

        if i in list(df_cont.columns):
            df_i = pd.DataFrame(df_cont[i])
            df_cont_new = pd.concat([df_cont_new, df_i], axis=1)

        if i not in list(df.columns):
            df_i = pd.DataFrame({df.index.name: list(df.index), i:[np.nan]*len(df)})
            df_i = df_i.set_index(df.index.name)
            df_new = pd.concat([df_new, df_i], axis=1)

        if i not in list(df_cont.columns):
            df_i = pd.DataFrame({df_cont.index.name: list(df_cont.index), i:[np.nan]*len(df_cont)})
            df_i = df_i.set_index(df_cont.index.name)
            df_cont_new = pd.concat([df_cont_new, df_i], axis=1)
    return df_new, df_cont_new

def normalizado (df, df_cont, typ):
    df, df_cont = eval_columns(df, df_cont)

    #df = df.fillna(0)
    #df_cont = df_cont.fillna(0)

    mean = np.array(df_cont.mean())
    std = np.array(df_cont.std())
    # Algebra lineal
    df_norm = (df-mean)/std
    df_norm.insert(0,'Type', typ)
    return df_norm

all_norm = normalizado(all_sites, df_controles, typ)

all_norm = all_norm.reset_index()
all_norm.rename(columns={'index': 'ID'}, inplace = True)
all_norm = all_norm.set_index('ID')
print('All normalized sites')
print(all_norm)
all_norm.to_csv(output + '/matrix_filtered_target_normalized.csv')

onco_mean = onco_mean.set_index('ID')

df_controles = onco_mean.T
#print(df_controles)
df_controles = df_controles[df_controles['Status'] == 'Normal']
df_controles = df_controles.drop(['Status'], axis=1)

columns = df_controles.columns.values
df_controles[columns] = df_controles[columns].apply(pd.to_numeric, errors='coerce', axis=1)

onco_mean = onco_mean.T
typ = list(onco_mean['Status'])

onco_mean = onco_mean.drop(['Status'], axis=1)
columns = onco_mean.columns.values
onco_mean[columns] = onco_mean[columns].apply(pd.to_numeric, errors='coerce', axis=1)
ID = onco_mean.index.values

mean_norm = normalizado(onco_mean, df_controles, typ)

mean_norm = mean_norm.reset_index()
mean_norm.rename(columns={'index': 'ID'}, inplace = True)
mean_norm = mean_norm.set_index('ID')
print('Mean per Gene normalized')
print(mean_norm)
mean_norm.to_csv(output + '/matrix_mean_gene_normalized.csv')
print ('=================== done matrix_normalizer ===================')
